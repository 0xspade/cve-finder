#!/usr/bin/python3
# -*- coding: utf-8 -*-
import requests, colorama, argparse, re
from mitrecve import crawler
from colorama import Fore, Back, Style
colorama.init()

#python3 -m pip install requests, mitrecve, colorama --break-system-packages

def extract_year(cve_string):
    parts = cve_string.split('-')
    if len(parts) >= 3:
        return parts[1]
    return None

def get_github_exploit(cve):
    if "cve".lower() in cve:
        cve = cve.upper()
    year = extract_year(cve)
    url="https://raw.githubusercontent.com/nomi-sec/PoC-in-GitHub/master/"+year+"/"+cve+".json"
    exp = requests.get(url)
    if exp.status_code == 200:
        return exp.json()
    elif exp.status_code == 404:
        return "no_exploit"
    else:
        return "error"

def get_cve_entries_by_tech(tech):
    details = crawler.get_main_page(tech)
    output = ""
    output += Fore.GREEN + "-" * 70 + Style.RESET_ALL
    output += "\n"
    for k, v in details.items():
        link = ""  # Reset link for each CVE ID
        has_exploit = False  # Flag to check if any exploit links are found

        for sk, sv in v.items():
            if sk == 'ID':
                output += Fore.GREEN + f"{sk}: {sv}\n" + Style.RESET_ALL
                get_exploit_link = get_github_exploit(sv)

                if get_exploit_link == "error":
                    link = Fore.RED + "An Error Occurred!" + Style.RESET_ALL
                elif get_exploit_link != "no_exploit":
                    has_exploit = True
                    for i in range(len(get_exploit_link)):
                        link += Fore.MAGENTA + "Exploit Link: " + get_exploit_link[i]['html_url'] + "\n" + Style.RESET_ALL
            elif sk != '__PACKAGE':
                output += Fore.GREEN + f"{sk}: {sv}\n" + Style.RESET_ALL

        if not has_exploit:
            link = Fore.RED + "No Available Exploit in Github!" + Style.RESET_ALL

        output += link
        output += "\n"
        output += Fore.GREEN + "-" * 70 + Style.RESET_ALL
        output += "\n"

    return output


def get_cve_entries(cve):
    if "cve".lower() in cve:
        cve = cve.upper()
    details = crawler.get_main_page(cve)
    output = ""
    for k, v in details.items():
        for sk, sv in v.items():
            if sk != '__PACKAGE':
                output += Fore.GREEN+f"{sk}: {sv}\n"+Style.RESET_ALL
        output += "\n"

    get_exploit_link = get_github_exploit(cve)
    if get_exploit_link == "no_exploit":
        output += Fore.RED+"No Available Exploit in Github!"+Style.RESET_ALL
    elif get_exploit_link == "error":
        output += Fore.RED+"An Error Occured!"+Style.RESET_ALL
    else:
        for i in range(len(get_exploit_link)):
            output += Fore.GREEN+"Exploit Link: "+get_exploit_link[i]['html_url']+Style.RESET_ALL
    output += "\n"
    return output

banner = """
 ██████╗██╗   ██╗███████╗    ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗    ███████╗██╗███╗   ██╗██████╗ ███████╗██████╗ 
██╔════╝██║   ██║██╔════╝    ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝    ██╔════╝██║████╗  ██║██╔══██╗██╔════╝██╔══██╗
██║     ██║   ██║█████╗      █████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║       █████╗  ██║██╔██╗ ██║██║  ██║█████╗  ██████╔╝
██║     ╚██╗ ██╔╝██╔══╝      ██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║       ██╔══╝  ██║██║╚██╗██║██║  ██║██╔══╝  ██╔══██╗
╚██████╗ ╚████╔╝ ███████╗    ███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║       ██║     ██║██║ ╚████║██████╔╝███████╗██║  ██║
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝       ╚═╝     ╚═╝╚═╝  ╚═══╝╚═════╝ ╚══════╝╚═╝  ╚═╝
by: Spade                                                                                         Looking for an exploit in Github?"""
def main():
    print(Fore.CYAN+banner+Style.RESET_ALL)
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('-c', '--cve', nargs='?', action="store", help='CVE ID')
    parser.add_argument('-t', '--tech', nargs='?', action="store", help='Search Technology')
    args = parser.parse_args()
    print(Fore.YELLOW+"[!] WARNING! Watch Out for Fake GitHub Exploits — Download at Your Own Risk."+Style.RESET_ALL)
    try:
        if args.cve:
            if "cve".lower() in args.cve:
                cve = args.cve.upper()
            else:
                cve = args.cve
            cve_pattern = re.compile(r'CVE-\d{4}-\d{4,}')
            if cve_pattern.match(cve):
                print(get_cve_entries(cve))
            else:
                print(Fore.RED+"[-] Not a CVE ID! Please provide a valid CVE ID."+Style.RESET_ALL)
                exit(0)
        elif args.tech:
            print(get_cve_entries_by_tech(args.tech))
        else:
            print(Fore.RED+"[-] Wrong argument! Please see -h options for more details."+Style.RESET_ALL)
            exit(0)
    except KeyboardInterrupt:
        print(Fore.RED+"[X] Keyboard Interrupt!..\nExiting!..."+Style.RESET_ALL)
        exit(0)

if __name__ == "__main__":
    main()
